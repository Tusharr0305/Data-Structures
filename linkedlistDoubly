#include<iostream>
using namespace std;
class node{
    public:
    int data;
    node*next;
    node*prev;
    node(int d){
        this->data=d;
        next=NULL;
        prev=NULL;
    }
};
int getlength(node* head){
    int cnt=0;
    node*temp=head;
    while(temp!=NULL){
        cnt++;
        temp=temp->next;
    }
    return cnt;
}
void insertathead(node* &head,int d){
if(head==NULL){
    node*temp=new node(d);
    head=temp;
}
else{
    node* temp=new node(d);
    temp->next=head;
    head->prev=temp;
    head=temp;
}
}
void print(node* head){
      node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
void insertAtTail(node* &tail,int d){
    if(tail==NULL)
    {node*temp=new node(d);
     tail=temp;
     }
     else{
        node*temp=new node(d);
        temp->prev=tail;
        tail->next=temp;
        tail=temp;
     }
}
void insertatpos(node* &head,node*&tail,int pos,int d)
{
    if(pos==1)
    {
        insertathead(head,d);
    }
    else if(pos>getlength(head))
    insertAtTail(tail,d);
    else{
    //assuming that position exists and list is not empty
    node*temp=new node(d);
    int cnt=1;
    node*curr=head;
    while(cnt<pos){
        cnt++;
        curr=curr->next;
    }
    node*prev=curr->prev;
    prev->next=temp;
    temp->prev=prev;
    curr->prev=temp;
    temp->next=curr;
    }
}
void deletion(node*&head,node*& tail,int pos){
    if(pos==1){
    node*temp=head;
    head=temp->next;
    temp->next->prev=NULL;
    
    temp->next=NULL;
    delete temp;

    }
    else if(pos>=getlength(head)){
        node*temp=tail;
        tail=tail->prev;
        temp->prev->next=NULL;
        temp->prev=NULL;
        delete temp;
    }
     else{
        node*curr=head;
        int cnt=1;
        while(cnt<pos){
            cnt++;
            curr=curr->next;
        }
        node*prev=curr->prev;
        curr->next->prev=prev;
        prev->next=curr->next;
        curr->next=NULL;
        curr->prev=NULL;
        delete curr;
     }

    }
    
    
    
    /* 
     node*curr=head;
     while(curr->data==val){
        curr=curr->next;
     }
     node* prev=curr->prev;
     prev->next=curr->next;
} */


int main(){
    node* node1=new node(10);
    node* head=node1;
    node* tail=node1;
    /* node*head=NULL; */
    insertathead(head,7);
    print(head);
    insertathead(head,56);
    print(head);
    insertathead(head,8);
    print(head);
    
    insertathead(head,6);
     print(head);
     insertAtTail(tail,55);
    print(head);
    insertatpos(head,tail,3,12);
    print(head);
    insertatpos(head,tail,19,155);
    print(head);
    deletion(head,tail,1);
    print(head);
    deletion(head,tail,9);
    cout<<tail->data<<endl;
    print(head);
    cout<<getlength(head);
     return 0;
}
